function [ddx, ddy, dda, C] = Cox_LineFit(angs, meas, p_state, sensor_offset, LINEMODEL)

% Setup
alpha = sensor_offset(1);  % [Scalar] Offset between sensors centre and robots x-axis
beta = sensor_offset(2);   % [Scalar] Offset between sensors centre and robots y-axis
gamma = sensor_offset(3);  % [Scalar] Heading offset between sensors and robots x-axis(-pi/2 radians)
vm = mean([meas.*cos(angs) meas.*sin(angs)]) % Mean of all points
ddx = 0
ddy = 0
dda = 0
running = true;

% Get unit vectors of all lines
rot = [0 -1;1 0] % 90 degree rotation matrix
for kk = 1:size(LINEMODEL, 1)
    L1 = [LINEMODEL(kk,1:2); LINEMODEL(kk,3:4)]; % [X1, X2; Y1, Y2]
    L2 = [LINEMODEL(kk,1), LINEMODEL(kk,1);      % [X1, X1; Y1, Y1]
          LINEMODEL(kk,3), LINEMODEL(kk,3)]; 
    V = rot*(L1-L2);       % rot*[0,  X2-X1; 0, Y2-Y1] Rotate line 90 degrees and move it to origo 
    Ui = V/norm(V)         % Normalize for unitvector
    Ri = dot(Ui, L1);      % Project unitvector on L1
    U(kk,1:2) = [Ui(3) Ui(4)];  %[Xu Yu]
    R(kk,1:2) = Ri;
end;


% The loop
while running
    
    % 1.Translate and rotate all data points
    for kk = 1:size(angs, 2)
        x(kk) = meas(kk)*cos(angs(kk));
        y(kk) = meas(kk)*sin(angs(kk));
        rot = [cos(gamma) -sin(gamma) alpha; sin(gamma) cos(gamma) beta; 0 0 1];
        Xs = rot*[x(kk) y(kk) 1]';
        rot = [cos(p_state(3)) -sin(p_state(3)) p_state(1); sin(p_state(3)) cos(p_state(3)) p_state(2); 0 0 1];
        Xw = rot*[Xs(1) Xs(2) 1]';
        v(kk, 1:2) = [Xw(1), Xw(2)]';
    end;
    index = 1;
    
    % 2.Find the target line for all data points
    for kk = 1:size(angs, 2) % Points
        for ii = 1:size(LINEMODEL, 1)% Lines
            yi(ii) = R(ii,2) - dot(U(ii,:), v(kk,1:2));
        end
        % Save target for data point
        [min_y(kk), y(kk)] = min(yi);    % [target distance, target index] 
        if y.*y > median(y) % Reject all outliers
            vi(index,1:3) = [v(kk,1:2) y(kk)]; % [vi1 vi2 targetindex]
            index = index+1;
        end
    end
    
    for kk = 1:size(vi, 1)
        % 3.Set up linear equation system
        X1(kk) = U(vi(kk,3), 1);
        X2(kk) = U(vi(kk,3), 2);
        X3(kk) = U(vi(kk,3),:)*[0 -1;1 0]*(vi(kk,1:2)-mean(vi(:,1:2)))';
        A = [X1(kk) X2(kk) X3(kk)];
        B = inv(A'*A)*A'*y
        S2 = ((y-A*B)*(y-A*B)')/(max(size(A))-4);
        C = S2*(inv(A'*A));
        
        % 4.Add latest contribution to the overall congruence
        dx = B(1);
        dy = B(2);
        da = B(3);
        ddx = ddx + dx;
        ddy = ddy + dy;
        dda = dda + da;
    end
    
    if(sqrt(dx^2+dy^2+da^2) < 5)&&(abs(da<0.1*pi/180))
        break;
        running = false;
    else
        continue;
    end
end

